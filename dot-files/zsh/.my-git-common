
## Git {

alias gitlog='git log --decorate=full --graph --stat'
alias gitlogfull='git log --decorate=full --graph --pretty=fuller --stat'
alias gittotallines='git ls-files | xargs file | grep ".*: .* text" | sed "s;\(.*\): .* text.*;\1;" | xargs wc -l'

alias git-push-remote-add='git remote set-url origin --add'
alias git-pull-remote-add='git remote add'

alias git-checkout-from-multiple-remote-repos='echo -e "\ngit checkout -b <localBranch> <remote>/<remoteBranch>\n  e.g.)\n  git checkout -b some-branch origin/some-branch\n"'
alias git-pull-branch-without-checkout='echo -e "\n\e[0;31mWARNING: only for fast-forward\e[m\n\ngit fetch <remote> <sourceBranch>:<destinationBranch>\n  e.g.)\n  git fetch origin master:master\n"'

alias git-sync-remote-branches='git fetch --prune origin "+refs/tags/*:refs/tags/*"'

alias git-add-upstream='git remote add upstream'

alias git-rm-all-indexed='git ls-files -z | xargs -0 git rm --cached'

alias git-ignore-case='git config --global core.ignorecase'

alias git-clean-up-local-branches='git fetch --prune && git branch -r | awk '"'"'{print $1}'"'"' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '"'"'{print $1}'"'"' | xargs git branch -d'

alias git-head-commit-id='git rev-parse HEAD'

alias git-fixup='git commit --fixup'

# alias git-fixup-head='git-fixup "$(git-head-commit-id)"'
alias git-fixup-head='git-fixup HEAD'

git-autosquash () {
  num_rex='^[0-9]+$'
  if [ -z "$1" ] || ! [[ "$1" =~ $num_rex ]]
  then
    echo "Please enter the number of commits from HEAD"
    echo "e.g.) gitAutosquash 2"
    echo "runs git rebase -i --autosquash HEAD~2"
  else
    git rebase -i --autosquash "HEAD~$1"
  fi
}

gitpullall()
{
  repos_to_ignore="origin"
  should_ignore=-1

  echo "running: git pull"
  git pull
  echo ""

  for remote in `git remote`
    do
    echo "=================================="
    echo "Remote: $remote"
    echo "----------------------------------"
    for ignore in $repos_to_ignore
      do
      [ "$remote" = "$ignore" ] && { should_ignore=1; break; } || :
    done

    if [ "$should_ignore" = "-1" ]
      then
      THIS_BRANCH_NAME=`git rev-parse --abbrev-ref HEAD`
      { git branch -r | grep -s "^[[:space:]]\+$remote/$THIS_BRANCH_NAME$" 2>&1 > /dev/null } || { git branch -r | grep -s "^[[:space:]]\+$remote/$THIS_BRANCH_NAME""[[:space:]]\+" 2>&1 > /dev/null } || {
        echo "No info of the remote repo named '$remote' is found."
        echo "So $remote will be fetched."
        echo "running: git fetch $remote"
        git fetch "$remote"
        echo ""
      }
      if git branch -r | grep -sw "$remote/$THIS_BRANCH_NAME" 2>&1 > /dev/null ; then
        echo "running: git pull $remote $THIS_BRANCH_NAME"
        git pull "$remote" "$THIS_BRANCH_NAME"
      else
        echo "$THIS_BRANCH_NAME branch does not exist on the remote called '$remote'."
        echo "So $remote will not be pulled from $remote."
      fi
    else
      echo "$remote is on the ignored list so ignore it."
      echo "Ignored: $remote"
    fi
    should_ignore=-1
    echo "=================================="
    echo ""
  done
}


git_fetch_upstream() {
  NC='\033[0m'
  LIGHT_BLUE='\033[1;34m'
  LIGHT_GREEN='\033[1;32m'
  RED="\033[0;31m"

  if git remote | grep -w upstream 2>&1 > /dev/null ; then
    if [ -n "$1" ]
    then
      printf "${LIGHT_BLUE}upstream info found: ${NC}\n"
      printf "${LIGHT_GREEN}running: git remote ${NC}\n"
      git remote 
      branch_name="$1"
      printf "\n${LIGHT_GREEN}running: git fetch upstream ${NC}\n"
      git fetch upstream 
      printf "\n${LIGHT_GREEN}running: git checkout $branch_name ${NC}\n"
      git checkout $branch_name 
      printf "\n${LIGHT_GREEN}running: git merge upstream/$branch_name ${NC}\n"
      git merge "upstream/$branch_name" 
      echo ""
    else
      printf "${RED}Please enter the branch name.${NC}\n"
      echo "  git-fetch-upstream master "
      echo "  git-fetch-upstream my-branch "
      echo ""
    fi
  else
    printf "${RED}upstream branch does not exist please add it first.${NC}\n"
    echo ""
    printf "git remote add upstream ${LIGHT_GREEN}GIT_REMOTE_REPOSITORY${NC}\n"
    echo ""
    echo "e.g.) "
    printf "git remote add upstream ${LIGHT_GREEN}git@github.com:SOME_USER/some-project.git${NC}\n"
    echo ""
  fi
}

git_find_file() {
  missing_data=0
  if [ -z "$1" ]
  then
    missing_data=1
    echo "Git repo locaiton is missing."
  fi
  if [ -z "$2" ]
  then
    missing_data=1
    echo "The filename of the file you're looking for is missing."
  fi
  if [ $missing_data != 0 ]
  then
    echo "usage)"
    echo "git_find_file GIT_REPO_LOCATION FILE_NAME BRANCH "
    echo "BRANCH is optional and when missing, master is used." 
    echo "git_find_file ssh://git@github.com:username/project.git build.sbt develop " 
  else
    if [ -z "$3" ]
    then
      echo "The branch is missing so it will use master."
      branch_name="master"
    else
      branch_name="$3"
    fi

    git archive --format=tar --remote="$1" $branch_name "$2" >/dev/null && echo "FOUND" || echo "NOT THERE";
  fi

}


## } Git
